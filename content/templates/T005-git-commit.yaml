id: T005
name: "Git Commit Message Template"
version: "2.0.0"
workspace_version: "3.0.0"
modified: "2025-07-05T00:10:00+0530"
purpose: "Ensures all commits include full context and traceability with privacy-conscious user request handling"
format: "markdown"
content: |
  [type]: [Brief description - 50 chars max]
  
  ## Problem
  [Abstract description of the issue being solved, focused on technical 
  aspects rather than specific user context]
  
  ## Solution
  [Technical approach taken to solve the problem]
  
  ### Key Changes
  - [File/path]: [What changed and why]
  - [File/path]: [What changed and why]
  
  ### Technical Decisions
  1. **Decision**: [What was decided]
     **Rationale**: [Technical reasoning]
     **Alternative**: [What was considered but rejected]
  
  ## Testing
  - [How changes were verified]
  - [Test scenarios covered]
  
  ## Future Considerations
  - [What could be improved or extended]
  - [Known limitations or trade-offs]
  
  ## References
  - Rules: @content/rules/[R###]
  - Templates: @content/templates/[T###]
  - Related: [issue/PR/commit references]
  
  User Request: [Paraphrased summary of what was requested - privacy conscious]
  
  ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
  
  Co-Authored-By: Claude <noreply@anthropic.com>
  
usage: |
  1. Use for all commits in feature branches
  2. Replace [type] with: feat, fix, docs, style, refactor, test, chore
  3. Keep first line under 50 characters
  4. Paraphrase user requests - extract technical essence, remove personal details
  5. Focus on WHAT changed, not WHO requested or WHY business-wise
  6. Leverage git's 4GB+ commit capacity for comprehensive context
  7. Reference relevant rules and templates
  
privacy_guidelines: |
  ## User Request Paraphrasing Guidelines
  
  NEVER include:
  - Direct quotes from user messages
  - Company/personal names
  - Specific business context
  - Internal URLs or endpoints
  - User's emotional state or urgency
  
  ALWAYS paraphrase to:
  - Technical requirements only
  - Abstract problem description
  - General feature/fix description
  
  Examples:
  - Bad: "Fix checkout bug for ACME Corp's European customers"
  - Good: "Fix timezone-related checkout failure"
  
  - Bad: "CEO wants real-time dashboard for board meeting"
  - Good: "Add real-time metrics dashboard"

examples:
  - |
    feat: Consolidate untracked content and add branch management
    
    ## Problem
    - Content structure needed dedicated area for untracked items
    - No mechanism to prevent orphaned feature branches
    - Multiple .gitignore files created confusion
    
    ## Solution
    Implemented .untracked/ directory structure, branch lifecycle management,
    and consolidated .gitignore patterns.
    
    ### Key Changes
    - content/rules/R002: Updated for .untracked/ structure
    - content/rules/R010: New branch lifecycle rule
    - content/scripts/dws: Updated for new structure
    - .gitignore: Consolidated all patterns in root
    
    ### Technical Decisions
    1. **Decision**: Single .gitignore at root
       **Rationale**: Simpler, single source of truth
       **Alternative**: Multiple .gitignore files (rejected - complexity)
    
    ## Testing
    - Verified dws create generates correct structure
    - Tested .gitignore patterns work correctly
    - Confirmed branch detection functions
    
    ## References
    - Rules: @content/rules/R002, R010
    - Templates: @content/templates/T009
    
    User Request: Consolidate untracked items in dedicated directory structure
    
references:
  - "R007"  # Commit message standards
  - "T006"  # PR template